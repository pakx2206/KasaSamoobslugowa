package ppacocha.kasasamoobslugowa.ui;

import ppacocha.kasasamoobslugowa.nfc.CardReaderNdef;
import ppacocha.kasasamoobslugowa.model.Produkt;
import ppacocha.kasasamoobslugowa.model.Transakcja;
import ppacocha.kasasamoobslugowa.service.KasaService;
import ppacocha.kasasamoobslugowa.service.RaportService;
import ppacocha.kasasamoobslugowa.util.PDFReportGenerator;
import ppacocha.kasasamoobslugowa.util.ReceiptGenerator;
import ppacocha.kasasamoobslugowa.util.LanguageSetup;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.*;
import java.time.LocalDate;
import java.util.List;

public class AppFrame extends JFrame {
    private final KasaService kasaService;
    private final RaportService raportService;
    private Thread nfcThread;
    private CardReaderNdef reader;
    private String PickedLanguage = "pl";
    private CardLayout layout;
    private final JButton printReportButton = new JButton("Drukuj raport");
    public AppFrame() {
        kasaService = new KasaService();
        raportService = new RaportService();
        layout = new CardLayout();
        initComponents();
        setLocationRelativeTo(null);
        reInitCardLayout();
        updateTexts();
        layout.show(layoutPanel, "card2");
        try {
            reader = new CardReaderNdef();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(
                    this,
                    LanguageSetup.get(PickedLanguage, "NFCScanner.connection.error") + "\n" + e.getMessage(),
                    LanguageSetup.get(PickedLanguage, "NFCScanner.error"),
                    JOptionPane.ERROR_MESSAGE
            );
            reader = null;
        }
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                JPasswordField pf = new JPasswordField();
                int ok = JOptionPane.showConfirmDialog(
                        AppFrame.this,
                        pf,
                        "Podaj hasło personelu:",
                        JOptionPane.OK_CANCEL_OPTION,
                        JOptionPane.PLAIN_MESSAGE
                );
                if (ok != JOptionPane.OK_OPTION) return;
                String pass = new String(pf.getPassword());
                if (!"admin123".equals(pass)) {
                    JOptionPane.showMessageDialog(
                            AppFrame.this,
                            "Nieprawidłowe hasło",
                            "Błąd",
                            JOptionPane.ERROR_MESSAGE
                    );
                    return;
                }
                try {
                    List<Transakcja> todays = raportService.getTodaysTransactions();
                    PDFReportGenerator.generateDailyReportPDF(todays);
                    JOptionPane.showMessageDialog(
                            AppFrame.this,
                            "Raport dzienny zapisany jako PDF w folderze 'reports'",
                            "Gotowe",
                            JOptionPane.INFORMATION_MESSAGE
                    );
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(
                            AppFrame.this,
                            "Błąd generowania raportu: " + ex.getMessage(),
                            "Błąd",
                            JOptionPane.ERROR_MESSAGE
                    );
                }
                dispose();
                System.exit(0);
            }
        });
    }

    private void reInitCardLayout() {
        layoutPanel.add(startingPanel, "card2");
        layoutPanel.add(basketPanel, "card3");
        layoutPanel.add(manualProductEntryPanel, "card4");
        layoutPanel.add(languageSelectionPanel, "card5");
        layoutPanel.add(paymentPanel, "card6");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        layoutPanel = new javax.swing.JPanel();
        startingPanel = new javax.swing.JPanel();
        callHelpButton = new javax.swing.JButton();
        selectLanguageButton = new javax.swing.JButton();
        startCheckout = new javax.swing.JButton();
        basketPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        gotoPaymentButton = new javax.swing.JButton();
        gotoManualEntryButton = new javax.swing.JButton();
        callHelpButton2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        manualProductEntryPanel = new javax.swing.JPanel();
        productCodeTextField = new javax.swing.JTextField();
        searchForProductButton = new javax.swing.JButton();
        productNameLabel = new javax.swing.JLabel();
        addProductManually = new javax.swing.JButton();
        backToBasketFromManualEntryButton = new javax.swing.JButton();
        paymentPanel = new javax.swing.JPanel();
        payByCashButton = new javax.swing.JButton();
        payByCardButton = new javax.swing.JButton();
        languageSelectionPanel = new javax.swing.JPanel();
        polishLanguageButton = new javax.swing.JButton();
        englishLanguageButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        layoutPanel.setBackground(new java.awt.Color(255, 51, 51));
        layoutPanel.setLayout(new java.awt.CardLayout());
        layoutPanel.setLayout(this.layout);

        callHelpButton.setText("Pomoc");
        callHelpButton.setMaximumSize(new java.awt.Dimension(80, 80));
        callHelpButton.setMinimumSize(new java.awt.Dimension(80, 80));
        callHelpButton.setPreferredSize(new java.awt.Dimension(80, 80));
        callHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                callHelpButtonActionPerformed(evt);
            }
        });

        selectLanguageButton.setText("Język");
        selectLanguageButton.setMaximumSize(new java.awt.Dimension(80, 80));
        selectLanguageButton.setMinimumSize(new java.awt.Dimension(80, 80));
        selectLanguageButton.setPreferredSize(new java.awt.Dimension(80, 80));
        selectLanguageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectLanguageButtonActionPerformed(evt);
            }
        });

        startCheckout.setText("Rozpocznij Kasowanie Produktów");
        startCheckout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startCheckoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout startingPanelLayout = new javax.swing.GroupLayout(startingPanel);
        startingPanel.setLayout(startingPanelLayout);
        startingPanelLayout.setHorizontalGroup(
            startingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(startingPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(selectLanguageButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(callHelpButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(startingPanelLayout.createSequentialGroup()
                .addContainerGap(302, Short.MAX_VALUE)
                .addComponent(startCheckout, javax.swing.GroupLayout.PREFERRED_SIZE, 478, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(324, Short.MAX_VALUE))
        );
        startingPanelLayout.setVerticalGroup(
            startingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(startingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(startingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(callHelpButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(selectLanguageButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 278, Short.MAX_VALUE)
                .addComponent(startCheckout, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(160, Short.MAX_VALUE))
        );

        layoutPanel.add(startingPanel, "card2");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Nazwa Produktu", "Ilosc", "Cena"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setRowHeight(40);
        jScrollPane1.setViewportView(jTable1);

        gotoPaymentButton.setText("Zapłać");
        gotoPaymentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gotoPaymentButtonActionPerformed(evt);
            }
        });

        gotoManualEntryButton.setText("Wpisz kod produktu");
        gotoManualEntryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gotoManualEntryButtonActionPerformed(evt);
            }
        });

        callHelpButton2.setText("Pomoc");
        callHelpButton2.setMaximumSize(new java.awt.Dimension(80, 80));
        callHelpButton2.setMinimumSize(new java.awt.Dimension(80, 80));
        callHelpButton2.setPreferredSize(new java.awt.Dimension(80, 80));
        callHelpButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                callHelpButton2ActionPerformed(evt);
            }
        });
        basketPanel.add(printReportButton);
        printReportButton.addActionListener(e -> {
            try {
                List<Transakcja> todays = raportService.getTodaysTransactions();
                PDFReportGenerator.generateDailyReportPDF(todays);
                JOptionPane.showMessageDialog(
                        AppFrame.this,
                        "Raport zapisany do folderu reports",
                        "OK",
                        JOptionPane.INFORMATION_MESSAGE
                );
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(
                        AppFrame.this,
                        "Błąd podczas drukowania: " + ex.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE
                );
            }
        });

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        jLabel2.setBackground(new java.awt.Color(204, 204, 204));
        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("505250.50 PLN");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout basketPanelLayout = new javax.swing.GroupLayout(basketPanel);
        basketPanel.setLayout(basketPanelLayout);
        basketPanelLayout.setHorizontalGroup(
            basketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, basketPanelLayout.createSequentialGroup()
                .addContainerGap(56, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 643, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addGroup(basketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(gotoPaymentButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(gotoManualEntryButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(80, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, basketPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(callHelpButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        basketPanelLayout.setVerticalGroup(
            basketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(basketPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(callHelpButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addGroup(basketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(basketPanelLayout.createSequentialGroup()
                        .addComponent(gotoManualEntryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(183, 183, 183)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)
                        .addComponent(gotoPaymentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(55, 55, 55))
        );

        layoutPanel.add(basketPanel, "card3");

        productCodeTextField.setText("Wprowadź kod produktu");
        productCodeTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                productCodeTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                productCodeTextFieldFocusLost(evt);
            }
        });
        productCodeTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productCodeTextFieldActionPerformed(evt);
            }
        });

        searchForProductButton.setText("Wyszukaj");
        searchForProductButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchForProductButtonActionPerformed(evt);
            }
        });

        productNameLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        productNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        addProductManually.setText("Dodaj produkt");
        addProductManually.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addProductManuallyActionPerformed(evt);
            }
        });

        backToBasketFromManualEntryButton.setText("Cofnij");
        backToBasketFromManualEntryButton.setMaximumSize(new java.awt.Dimension(80, 80));
        backToBasketFromManualEntryButton.setMinimumSize(new java.awt.Dimension(80, 80));
        backToBasketFromManualEntryButton.setPreferredSize(new java.awt.Dimension(80, 80));
        backToBasketFromManualEntryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backToBasketFromManualEntryButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout manualProductEntryPanelLayout = new javax.swing.GroupLayout(manualProductEntryPanel);
        manualProductEntryPanel.setLayout(manualProductEntryPanelLayout);
        manualProductEntryPanelLayout.setHorizontalGroup(
            manualProductEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manualProductEntryPanelLayout.createSequentialGroup()
                .addGroup(manualProductEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, manualProductEntryPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(backToBasketFromManualEntryButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(manualProductEntryPanelLayout.createSequentialGroup()
                        .addContainerGap(277, Short.MAX_VALUE)
                        .addGroup(manualProductEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(productNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(productCodeTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 496, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(searchForProductButton)
                        .addGap(0, 228, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, manualProductEntryPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(addProductManually, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        manualProductEntryPanelLayout.setVerticalGroup(
            manualProductEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manualProductEntryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backToBasketFromManualEntryButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(manualProductEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(searchForProductButton, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
                    .addComponent(productCodeTextField))
                .addGap(40, 40, 40)
                .addComponent(productNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(124, 124, 124)
                .addComponent(addProductManually, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(162, Short.MAX_VALUE))
        );

        layoutPanel.add(manualProductEntryPanel, "card4");

        payByCashButton.setText("Zaplac gotowka");
        payByCashButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payByCashButtonActionPerformed(evt);
            }
        });

        payByCardButton.setText("Zaplac karta");
        payByCardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payByCardButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout paymentPanelLayout = new javax.swing.GroupLayout(paymentPanel);
        paymentPanel.setLayout(paymentPanelLayout);
        paymentPanelLayout.setHorizontalGroup(
            paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paymentPanelLayout.createSequentialGroup()
                .addContainerGap(301, Short.MAX_VALUE)
                .addComponent(payByCashButton, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(155, 155, 155)
                .addComponent(payByCardButton, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(328, Short.MAX_VALUE))
        );
        paymentPanelLayout.setVerticalGroup(
            paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paymentPanelLayout.createSequentialGroup()
                .addContainerGap(237, Short.MAX_VALUE)
                .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(payByCashButton, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(payByCardButton, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(242, Short.MAX_VALUE))
        );

        layoutPanel.add(paymentPanel, "card4");

        polishLanguageButton.setText("Polski");
        polishLanguageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                polishLanguageButtonActionPerformed(evt);
            }
        });

        englishLanguageButton.setText("Angielski");
        englishLanguageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                englishLanguageButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout languageSelectionPanelLayout = new javax.swing.GroupLayout(languageSelectionPanel);
        languageSelectionPanel.setLayout(languageSelectionPanelLayout);
        languageSelectionPanelLayout.setHorizontalGroup(
            languageSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(languageSelectionPanelLayout.createSequentialGroup()
                .addContainerGap(354, Short.MAX_VALUE)
                .addComponent(polishLanguageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(128, 128, 128)
                .addComponent(englishLanguageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(342, Short.MAX_VALUE))
        );
        languageSelectionPanelLayout.setVerticalGroup(
            languageSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(languageSelectionPanelLayout.createSequentialGroup()
                .addContainerGap(259, Short.MAX_VALUE)
                .addGroup(languageSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(polishLanguageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(englishLanguageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(300, Short.MAX_VALUE))
        );

        layoutPanel.add(languageSelectionPanel, "card5");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(layoutPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(layoutPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void callHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {
        callHelpFunction();
    }
    private void callHelpButton2ActionPerformed(java.awt.event.ActionEvent evt) {
        callHelpFunction();
    }
    private void gotoManualEntryButtonActionPerformed(java.awt.event.ActionEvent evt) {
        System.out.println(LanguageSetup.get(PickedLanguage, "goTo.manual"));
        refreshBasketTable();
        layout.show(layoutPanel, "card4");
    }
    private void productCodeTextFieldFocusGained(java.awt.event.FocusEvent evt) {
        if (productCodeTextField.getText().equals(LanguageSetup.get(PickedLanguage,"input.code")))
            productCodeTextField.setText("");
    }
    private void productCodeTextFieldFocusLost(java.awt.event.FocusEvent evt) {
        if (productCodeTextField.getText().isEmpty())
            productCodeTextField.setText(LanguageSetup.get(PickedLanguage,"input.code"));
    }
    private void productCodeTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
        addProductManuallyActionPerformed(evt);
    }
    private void startCheckoutActionPerformed(ActionEvent evt) {
        refreshBasketTable();
        layout.show(layoutPanel, "card3");
        if (reader != null && (nfcThread == null || !nfcThread.isAlive())) {
            nfcThread = new Thread(() -> {
                while (true) {
                    try {
                        String raw = reader.readTextRecord().trim();
                        String digits = raw.replaceFirst("(?i)^n", "");
                        if (!digits.matches("\\d+")) continue;
                        String tag = "NFC" + String.format("%03d", Integer.parseInt(digits));
                        SwingUtilities.invokeLater(() -> {
                            try {
                                kasaService.dodajPoKodzieLubTagu(tag);
                                refreshBasketTable();
                                JOptionPane.showMessageDialog(
                                        this,
                                        LanguageSetup.get(PickedLanguage, "NFCScan.confirmation") + tag,
                                        "NFC",
                                        JOptionPane.INFORMATION_MESSAGE
                                );
                            } catch (Exception ex) {
                                JOptionPane.showMessageDialog(
                                        this,
                                        LanguageSetup.get(PickedLanguage, "NFCScanner.error") + ex.getMessage(),
                                        LanguageSetup.get(PickedLanguage, "error"),
                                        JOptionPane.ERROR_MESSAGE
                                );
                            }
                        });
                    } catch (Exception ignored) {}
                }
            }, "NFC-Scanner-Thread");
            nfcThread.setDaemon(true);
            nfcThread.start();
        }
    }

    private void searchForProductButtonActionPerformed(ActionEvent evt) {
        String partial = productCodeTextField.getText().trim();
        if (partial.isEmpty()) {
            JOptionPane.showMessageDialog(this, LanguageSetup.get(PickedLanguage, "write.barCode"));
            return;
        }
        List<Produkt> wyniki = kasaService.szukajPoFragmencieKodu(partial);
        if (wyniki.isEmpty()) {
            JOptionPane.showMessageDialog(this, LanguageSetup.get(PickedLanguage, "no.results"));
            return;
        }
        Produkt selected = (Produkt) JOptionPane.showInputDialog(
                this,
                LanguageSetup.get(PickedLanguage, "search.choose"),
                LanguageSetup.get(PickedLanguage, "search.title"),
                JOptionPane.PLAIN_MESSAGE,
                null,
                wyniki.toArray(),
                wyniki.get(0)
        );
        if (selected != null) {
            kasaService.dodajPoKodzieLubTagu(selected.getKodKreskowy());
            refreshBasketTable();
            JOptionPane.showMessageDialog(
                    this,
                    LanguageSetup.get(PickedLanguage, "added.product") + selected.getNazwa(),
                    LanguageSetup.get(PickedLanguage, "info"),
                    JOptionPane.INFORMATION_MESSAGE
            );
            layout.show(layoutPanel, "card3");
        }
    }

    private void addProductManuallyActionPerformed(ActionEvent evt) {
        String code = productCodeTextField.getText().trim();
        try {
            kasaService.dodajPoKodzieLubTagu(code);
            JOptionPane.showMessageDialog(this, LanguageSetup.get(PickedLanguage, "added.product") + code);
            productCodeTextField.setText("");
            refreshBasketTable();
            layout.show(layoutPanel, "card3");
        } catch (IllegalArgumentException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Błąd", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void gotoPaymentButtonActionPerformed(ActionEvent evt) {
        layout.show(layoutPanel, "card6");
    }

    private void payByCashButtonActionPerformed(ActionEvent evt) {
        try {
            Transakcja tx = kasaService.finalizujTransakcje(LanguageSetup.get(PickedLanguage, "cash"));
            ReceiptGenerator.generateAndSaveReceipt(this, tx, PickedLanguage);
            refreshBasketTable();
            layout.show(layoutPanel, "card2");
        } catch (IllegalStateException ex) {
            JOptionPane.showMessageDialog(this, LanguageSetup.get(PickedLanguage, "empty.cart"), "Błąd", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void payByCardButtonActionPerformed(ActionEvent evt) {
        try {
            Transakcja tx = kasaService.finalizujTransakcje(LanguageSetup.get(PickedLanguage, "card"));
            ReceiptGenerator.generateAndSaveReceipt(this, tx, PickedLanguage);
            refreshBasketTable();
            layout.show(layoutPanel, "card2");
        } catch (IllegalStateException ex) {
            JOptionPane.showMessageDialog(this, LanguageSetup.get(PickedLanguage, "empty.cart"), "Błąd", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void backToBasketFromManualEntryButtonActionPerformed(ActionEvent evt) {
        refreshBasketTable();
        layout.show(layoutPanel, "card3");
    }

    private void selectLanguageButtonActionPerformed(ActionEvent evt) {
        layout.show(layoutPanel, "card5");
    }

    private void polishLanguageButtonActionPerformed(ActionEvent evt) {
        PickedLanguage = "pl";
        updateTexts();
        layout.show(layoutPanel, "card2");
    }

    private void englishLanguageButtonActionPerformed(ActionEvent evt) {
        PickedLanguage = "en";
        updateTexts();
        layout.show(layoutPanel, "card2");
    }

    private void callHelpFunction() {
        JOptionPane.showMessageDialog(
                paymentPanel,
                LanguageSetup.get(PickedLanguage, "alarm.help.info"),
                LanguageSetup.get(PickedLanguage, "alarm.help"),
                JOptionPane.INFORMATION_MESSAGE
        );
    }

    private void refreshBasketTable() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        java.util.Map<String, Integer> ilosci = new java.util.HashMap<>();
        java.util.Map<String, Produkt> produktyMap = new java.util.HashMap<>();
        java.math.BigDecimal suma = java.math.BigDecimal.ZERO;
        for (Produkt p : kasaService.getKoszyk()) {
            String kod = p.getKodKreskowy();
            ilosci.merge(kod, 1, Integer::sum);
            produktyMap.putIfAbsent(kod, p);
        }
        for (String kod : ilosci.keySet()) {
            Produkt p = produktyMap.get(kod);
            int qty = ilosci.get(kod);
            java.math.BigDecimal razem = p.getCena().multiply(java.math.BigDecimal.valueOf(qty));
            suma = suma.add(razem);
            model.addRow(new Object[]{p.getNazwa(), qty, razem});
        }
        jLabel2.setText(suma + " PLN");
    }

    private void updateTexts() {
        callHelpButton.setText(LanguageSetup.get(PickedLanguage, "menu.help"));
        callHelpButton2.setText(LanguageSetup.get(PickedLanguage, "menu.help"));
        selectLanguageButton.setText(LanguageSetup.get(PickedLanguage, "menu.language"));
        startCheckout.setText(LanguageSetup.get(PickedLanguage, "start.scan"));
        gotoManualEntryButton.setText(LanguageSetup.get(PickedLanguage, "cart.manual"));
        gotoPaymentButton.setText(LanguageSetup.get(PickedLanguage, "cart.checkout"));
        backToBasketFromManualEntryButton.setText(LanguageSetup.get(PickedLanguage, "cart.back"));
        productCodeTextField.setText(LanguageSetup.get(PickedLanguage, "input.code"));
        searchForProductButton.setText(LanguageSetup.get(PickedLanguage, "search.find"));
        addProductManually.setText(LanguageSetup.get(PickedLanguage, "cart.addManual"));
        payByCashButton.setText(LanguageSetup.get(PickedLanguage, "payment.cash"));
        payByCardButton.setText(LanguageSetup.get(PickedLanguage, "payment.card"));
        polishLanguageButton.setText(LanguageSetup.get(PickedLanguage, "language.pl"));
        englishLanguageButton.setText(LanguageSetup.get(PickedLanguage, "language.en"));
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setColumnIdentifiers(new String[]{
                LanguageSetup.get(PickedLanguage, "column.productName"),
                LanguageSetup.get(PickedLanguage, "column.quantity"),
                LanguageSetup.get(PickedLanguage, "column.price")
        });
    }


    private JButton addProductManually;
    private JButton backToBasketFromManualEntryButton;
    private JPanel basketPanel;
    private JButton callHelpButton;
    private JButton callHelpButton2;
    private JButton englishLanguageButton;
    private JButton gotoManualEntryButton;
    private JButton gotoPaymentButton;
    private JLabel jLabel2;
    private JPanel jPanel1;
    private JScrollPane jScrollPane1;
    private JTable jTable1;
    private JPanel languageSelectionPanel;
    private JPanel layoutPanel;
    private JPanel manualProductEntryPanel;
    private JButton payByCardButton;
    private JButton payByCashButton;
    private JPanel paymentPanel;
    private JButton polishLanguageButton;
    private JTextField productCodeTextField;
    private JLabel productNameLabel;
    private JButton searchForProductButton;
    private JButton selectLanguageButton;
    private JButton startCheckout;
    private JPanel startingPanel;
}